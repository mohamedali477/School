{"version":3,"sources":["webpack:///src/app/post-login/exam/exam-management/exam-list/exam-list.component.ts","webpack:///src/app/post-login/exam/exam-management/exam-list/exam-list.component.html","webpack:///src/app/post-login/exam/exam-management/exam-management.component.ts","webpack:///src/app/post-login/exam/exam-management/exam-management.component.html","webpack:///src/app/post-login/exam/exam-management/exam-report-card/exam-report-card.component.ts","webpack:///src/app/post-login/exam/exam-management/exam-report-card/exam-report-card.component.html","webpack:///src/app/post-login/exam/exam-management/exam-report-card/panel-format/panel-format.component.ts","webpack:///src/app/post-login/exam/exam-management/exam-report-card/panel-format/panel-format.component.html","webpack:///src/app/post-login/exam/exam-management/exam-report-card/tabular-format/tabular-format.component.ts","webpack:///src/app/post-login/exam/exam-management/exam-report-card/tabular-format/tabular-format.component.html","webpack:///src/app/post-login/exam/exam-management/new-exam/class-subject/class-subject.component.ts","webpack:///src/app/post-login/exam/exam-management/new-exam/class-subject/class-subject.component.html","webpack:///src/app/post-login/exam/exam-management/new-exam/class-subject/subject-exam-result/subject-exam-result-graph/subject-exam-result-graph.component.ts","webpack:///src/app/post-login/exam/exam-management/new-exam/class-subject/subject-exam-result/subject-exam-result-graph/subject-exam-result-graph.component.html","webpack:///src/app/post-login/exam/exam-management/new-exam/class-subject/subject-exam-result/subject-exam-result.component.ts","webpack:///src/app/post-login/exam/exam-management/new-exam/class-subject/subject-exam-result/subject-exam-result.component.html","webpack:///src/app/post-login/exam/exam-management/new-exam/exam-basic-info/exam-basic-info.component.ts","webpack:///src/app/post-login/exam/exam-management/new-exam/exam-basic-info/exam-basic-info.component.html","webpack:///src/app/post-login/exam/exam-management/new-exam/new-exam.component.ts","webpack:///src/app/post-login/exam/exam-management/new-exam/new-exam.component.html","webpack:///src/app/post-login/exam/exam-routing.module.ts","webpack:///src/app/post-login/exam/exam-type-management/exam-type-list/exam-type-list.component.ts","webpack:///src/app/post-login/exam/exam-type-management/exam-type-list/exam-type-list.component.html","webpack:///src/app/post-login/exam/exam-type-management/exam-type-management.component.ts","webpack:///src/app/post-login/exam/exam-type-management/exam-type-management.component.html","webpack:///src/app/post-login/exam/exam-type-management/new-exam-type/exam-type-basic-info/exam-type-basic-info.component.ts","webpack:///src/app/post-login/exam/exam-type-management/new-exam-type/exam-type-basic-info/exam-type-basic-info.component.html","webpack:///src/app/post-login/exam/exam-type-management/new-exam-type/new-exam-type.component.ts","webpack:///src/app/post-login/exam/exam-type-management/new-exam-type/new-exam-type.component.html","webpack:///src/app/post-login/exam/exam.module.ts","webpack:///src/app/post-login/exam/services/exam-type.service.ts","webpack:///src/app/post-login/exam/services/exam.service.ts"],"names":["ExamListComponent","examService","changeDetector","sharedService","sharedApiService","plService","unsubscribe$","viewButtonEvent","editButtonEvent","deleteButtonEvent","reportCardButtonEvent","tabularReportCardButtonEvent","pageTitle","isLoading","environment","masterData","exams","viewUser","searchParams","paging","pageIndex","pageSize","length","sortParams","fieldName","isAsc","editPermissions","getPageEntitlements","getClassSubjectObject","getList","getClassSubjectSectionDdl","pipe","subscribe","val","allClassSubjectObject","error","SearchObject","SearchParameters","sorting","getSchoolExamList","result","data","count","console","log","id","emit","sort","active","direction","detectChanges","paginator","next","complete","sortClicked","pagingClicked","selector","templateUrl","styleUrls","ExamManagementComponent","fb","showReportCardPage","showViewPage","showAddChangePage","showListPage","showDeleteButton","Id","searchForm","group","loadClassSubjectSectionDdl","ClassSectionWiseStudents","loadExamTypeDdl","classObject","getExamTypeDdl","setSearchConfig","examTypeObject","searchConfig","isViewMode","type","label","name","icon","options","academicSessions","_ListPage","value","searchCard","hide","event","backToListClick","isTabularReportCard","dialogRef","openConfirmDialog","afterClosed","confirmed","deleteSchoolExam","onSearchClick","ExamReportCardComponent","getExamResult","getExamResultStudentWise","examId","dbData","resultData","getSectonList","tempData","forEach","failedSubject","subjects","filter","x","marksGained","passingMarks","push","allSections","element","sections","Array","from","Set","selectedSectionId","selectedSectionToggleButton","sectionId","PanelFormatComponent","filteredData","orgData","_id","processFilter","TabularFormatComponent","a","b","distance","ClassSubjectComponent","initialFormValues","sectionList","subjectList","branchClassChanged$","sectionChanged$","isEditMode","form","addControl","control","array","fieldsConfig","onValueChange","classId","validations","required","academicSessionId","examTypeId","registerDropdownChangeEvents","fetchExamTypeDdl","fetchClassDdl","branchClassChanged","populateClassDdl","values","loadClassWiseExam","get","clear","setValue","classSection","subject","examDate","addSubject","subjectId","$oid","status","filterUniqueSubjects","uniqueSubjects","sub","filtered","subObject","subjectForm","section","fbGroup","find","sec","students","mapStudentForSubject","studentsControl","stu","studentId","SubjectExamResultGraphComponent","passedStudents","failedStudents","isGraphCalculationsDone","setChartColors","controls","calculate","chartColors","backgroundColor","sectionsArray","student","total","passedPercentage","toFixed","SubjectExamResultComponent","title","subTitle","showResult","computeClassSections","disable","markAllAsTouched","valid","sectionResult","serializeMongoObjectId","finalData","JSON","parse","stringify","saveSpecificSubjectSectionExamResult","sectionName","classSections","openSnackBar","showExamResult","ExamBasicInfoComponent","loadAllTeachers","maxMarks","inputType","allteachersList","setFormInitialValueForChangeMode","teacherDdl","NewExamComponent","onSaveSuccess","changeModeId","showHeader","childCard","mainForm","isPopulatingFormDb","open","stoppageCount","setTitleMessages","setFormCommonFields","populateFromDB","getSchoolExam","exam","onSubmit","preventDefault","stopPropagation","saveSchoolExam","getRawValue","reset","routes","path","component","outlet","ExamRoutingModule","forChild","imports","exports","ExamTypeListComponent","examTypeService","examTypes","getSchoolExamTypeList","ExamTypeManagementComponent","deleteSchoolExamType","ExamTypeBasicInfoComponent","NewExamTypeComponent","getSchoolExamType","examType","saveSchoolExamType","ExamModule","declarations","providers","ExamTypeService","_http","_sharedService","apiPrefix","post","apiUrl","subjectData","ExamService","examData","startDate","endDate"],"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","file":"exam-exam-module-es5.js","sourcesContent":["import { Component, OnInit, ChangeDetectorRef, Output, OnDestroy, EventEmitter, Input } from '@angular/core';\nimport { ExamService } from '../../services/exam.service';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { PageEvent } from '@angular/material/paginator';\nimport { Sort } from '@angular/material/sort';\nimport { Subject } from 'rxjs';\nimport { environment, MasterData } from '@env/environment';\nimport { SharedApiService } from '@app/shared/services/shared-api.service';\nimport { PostLoginService } from '@app/post-login/post-login.service';\n\n@Component({\n  selector: 'app-exam-list',\n  templateUrl: './exam-list.component.html',\n  styleUrls: ['./exam-list.component.css']\n})\nexport class ExamListComponent implements OnInit, OnDestroy {\n \n  private unsubscribe$ = new Subject();\n  \n  @Output() viewButtonEvent = new EventEmitter()\n  @Output() editButtonEvent = new EventEmitter()\n  @Output() deleteButtonEvent = new EventEmitter()\n  @Output() reportCardButtonEvent = new EventEmitter()\n  @Output() tabularReportCardButtonEvent = new EventEmitter()\n  \n  @Input() pageTitle: string =\"\"\n  @Input() roleId: number\n\n  isLoading = false;\n\n  environment = environment\n  masterData = MasterData;\n  exams = [];\n\n  viewUserId : any\n  viewUser = false\n  public editPermissions\n  public allClassSubjectObject\n\n  searchParams = null\n  paging = {\n    pageIndex: this.masterData.paging.pageIndex,\n    pageSize: this.masterData.paging.pageSize,\n    length: 1\n  }\n  sortParams = {\n    fieldName : \"_id\",\n    isAsc : false\n  }\n\n  constructor(\n    private examService: ExamService,\n    private changeDetector: ChangeDetectorRef,\n    public sharedService: SharedService,\n    private sharedApiService: SharedApiService,\n    private plService: PostLoginService\n  ) {\n    this.editPermissions = this.plService.getPageEntitlements(9,1) == 2\n  }\n\n  ngOnInit() {\n    this.getClassSubjectObject()\n    this.getList()\n  }\n\n  getClassSubjectObject(){\n    this.sharedApiService.getClassSubjectSectionDdl()    \n    .pipe(takeUntil(this.unsubscribe$))\n    .subscribe(val => {\n      this.allClassSubjectObject = val\n    },\n      error => {\n      }\n    )\n  }\n\n  getList()\n  {\n    this.isLoading = true;\n\n    let SearchObject = {\n      SearchParameters : this.searchParams,\n      paging : {\n        \"pageIndex\": this.paging.pageIndex,\n        \"pageSize\": this.paging.pageSize\n      },\n      sorting:{\n        \"fieldName\": this.sortParams.fieldName,\n        \"isAsc\": this.sortParams.isAsc\n      }\n    }\n\n    this.examService\n    .getSchoolExamList(SearchObject)\n    .pipe(takeUntil(this.unsubscribe$))\n    .subscribe(\n      (result: any) => {\n        this.isLoading =false\n        this.exams = result.data   \n        this.paging.length = result.count    \n      }, \n      (error) => {\n        this.isLoading =false\n        console.log(error)\n      }\n      );    \n  }\n  \n  examTabularReportCardClicked(id){\n    this.tabularReportCardButtonEvent.emit(id)\n  }\n\n  examReportCardClicked(id){\n    this.reportCardButtonEvent.emit(id)\n  }\n\n  viewClicked(id){\n    this.viewButtonEvent.emit(id)\n  }\n\n  editClicked(id){\n    this.editButtonEvent.emit(id)\n  }\n\n  deleteClicked(id){\n    this.deleteButtonEvent.emit(id)\n  }\n\n  CardCrossEvent_ViewUser(){\n    this.viewUser = false\n  }\n\n  sortClicked(sort: Sort){\n    this.paging.pageIndex = 0\n    this.sortParams.fieldName = sort.active\n    this.sortParams.isAsc = sort.direction === 'asc'\n    this.getList()\n    this.changeDetector.detectChanges();\n  }\n\n  pagingClicked(paginator: PageEvent){  \n    this.paging.pageIndex = paginator.pageIndex\n    this.paging.pageSize = paginator.pageSize\n    this.getList();\n    this.changeDetector.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n}\n","<card [loading]=\"isLoading\" [title]=\"'Exam List'\" [subTitle]=\"'Manage your exam for School'\"\n    (refresh)=\"getList()\">\n    <large-screen>\n        <table class=\"table\" matSort (matSortChange)=\"sortClicked($event)\">\n            <thead class=\"thead\">\n                <tr>\n                    <th class=\"sr\">#</th>\n                    <th matRipple mat-sort-header=\"academicSessionId\">\n                        Academic Session\n                        <mat-icon>ballot</mat-icon>\n                    </th>\n                    <th matRipple mat-sort-header=\"examTypeId\">\n                        Exam Type\n                        <mat-icon>developer_board</mat-icon>\n                    </th>\n                    <th matRipple mat-sort-header=\"classId\">\n                        Class\n                        <mat-icon>ballot</mat-icon>\n                    </th>\n                    <th>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"tr\" *ngFor=\"let exam of exams; let idx = index\">\n                    <td class=\"sr-col\">{{ (paging.pageIndex *  paging.pageSize) + idx+1}}</td>\n                    <td>{{exam.academicSessionId | masterData : 'academicSession' }}</td>\n                    <td>{{exam.examTypeId | examType }}</td>\n                    <td>{{exam.classId | class }}</td>\n                    <td class=\"rt\">\n                        <button mat-icon-button appToolTip=\"'Tabular Report Card'\" class=\"icon-view\"\n                            (click)=\"examTabularReportCardClicked(exam._id)\">\n                            <mat-icon mat-icon-button>table_chart</mat-icon>\n                        </button>\n                        <button mat-icon-button appToolTip=\"'Report Card'\" class=\"icon-view\"\n                            (click)=\"examReportCardClicked(exam._id)\">\n                            <mat-icon mat-icon-button>face</mat-icon>\n                        </button>\n                        <button mat-icon-button appToolTip=\"'View Exam'\" class=\"icon-view\"\n                            (click)=\"viewClicked(exam._id)\">\n                            <mat-icon mat-icon-button>visibility</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Edit Exam'\" class=\"icon-edit\"\n                            (click)=\"editClicked(exam._id)\">\n                            <mat-icon>edit</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Delete Exam'\" class=\"icon-delete\"\n                            (click)=\"deleteClicked(exam._id)\">\n                            <mat-icon>delete_forever</mat-icon>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </large-screen>\n\n    <small-screen class=\"default-font\">\n        <ng-container *ngFor=\"let exam of exams; let idx = index; let odd = odd\">\n            <card [childCard]=\"true\" [header]=\"false\">\n                <row gap=\"2px\">\n                    <div fxFlex=\"10%\">\n                        <b># {{ (paging.pageIndex * paging.pageSize) + idx+1}}</b>\n                    </div>\n                    <div fxFlex class=\"rt\">\n                        <button mat-icon-button appToolTip=\"'Tabular Report Card'\" class=\"big-icon-view\"\n                            (click)=\"examTabularReportCardClicked(exam._id)\">\n                            <mat-icon mat-icon-button>table_chart</mat-icon>\n                        </button>\n                        <button mat-icon-button appToolTip=\"'Report Card'\" class=\"big-icon-view\"\n                            (click)=\"examReportCardClicked(exam._id)\">\n                            <mat-icon mat-icon-button>face</mat-icon>\n                        </button>\n                        <button mat-icon-button appToolTip=\"'View Exam'\" class=\"big-icon-view\"\n                            (click)=\"viewClicked(exam._id)\">\n                            <mat-icon mat-icon-button>visibility</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Edit Exam'\" class=\"big-icon-edit\"\n                            (click)=\"editClicked(exam._id)\">\n                            <mat-icon>edit</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Delete Exam'\"\n                            class=\"big-icon-delete\" (click)=\"deleteClicked(exam._id)\">\n                            <mat-icon>delete_forever</mat-icon>\n                        </button>\n                    </div>\n                </row>\n                <br>\n                <div fxFlex>\n                    <mat-icon>ballot</mat-icon> <b>Academic Session: </b>\n                    <span class=\"small-screen-data\">{{exam.academicSessionId | masterData : 'academicSession' }}</span>\n                </div>\n                <br>\n                <row>\n                    <div>\n                        <div class=\"bold\">\n                            <mat-icon>developer_board</mat-icon> Exam Type\n                        </div>\n                        <div class=\"small-screen-data\">\n                            {{exam.examTypeId | examType }}\n                        </div>\n                    </div>\n                    <div fxFlex>\n                        <div class=\"bold\">\n                            <mat-icon>ballot</mat-icon> Class\n                        </div>\n                        <div class=\"small-screen-data\">\n                            {{exam.classId | class }}\n                        </div>\n                    </div>\n                </row>\n            </card>\n            <br>\n        </ng-container>\n\n    </small-screen>\n\n    <no-record-found *ngIf=\"exams.length ==0\"></no-record-found>\n\n    <mat-paginator [length]=\"paging.length\" [showFirstLastButtons]=\"masterData.paging.showFirstLastButtons\"\n        [pageSize]=\"paging.pageSize\" [pageSizeOptions]=\"masterData.paging.pageSizeOptions\"\n        (page)=\"pagingClicked($event)\">\n    </mat-paginator>\n</card>","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ExamListComponent } from './exam-list/exam-list.component';\nimport { MasterData } from '@env/environment';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { FieldConfig } from '@app/shared/component/dynamic-form/field.interface';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { ExamService } from '../services/exam.service';\nimport { SharedApiService } from '@app/shared/services/shared-api.service';\nimport { PostLoginService } from '@app/post-login/post-login.service';\nimport { CardBottomComponent } from '@app/shared/component/boxes/card-bottom/card-bottom.component';\n\n@Component({\n  selector: 'app-exam-management',\n  templateUrl: './exam-management.component.html',\n  styleUrls: ['./exam-management.component.css']\n})\nexport class ExamManagementComponent implements OnInit, OnDestroy {\n\n  private unsubscribe$ = new Subject();\n\n  @ViewChild(ExamListComponent) private _ListPage: ExamListComponent\n  @ViewChild('searchCard') searchCard: CardBottomComponent\n\n  showReportCardPage = false\n  showViewPage = false\n  showAddChangePage = false\n  showListPage = true\n\n  showDeleteButton = false\n  public editPermissions\n  public ClassSectionWiseStudents\n  public isTabularReportCard\n\n  isLoading = false\n  Id = null\n  masterData = MasterData\n\n  searchForm: FormGroup\n  searchConfig: FieldConfig[]\n\n  constructor(\n    private fb: FormBuilder,\n    private sharedService: SharedService,\n    private sharedApiService: SharedApiService,\n    private examService: ExamService,\n    private plService: PostLoginService\n  ) {\n    this.searchForm = this.fb.group({})\n    this.editPermissions = this.plService.getPageEntitlements(9, 1) === 2\n  }\n\n  ngOnInit() {\n    \n    this.loadClassSubjectSectionDdl()\n\n    this.sharedApiService.ClassSectionWiseStudents()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (result: any) => {\n          this.ClassSectionWiseStudents = result\n        },\n        (error) => {\n          console.log(error)\n        }\n      );\n\n  }\n\n  loadClassSubjectSectionDdl(){\n    this.sharedApiService.getClassSubjectSectionDdl()\n    .pipe(takeUntil(this.unsubscribe$))\n    .subscribe(\n      (result: any) => {        \n        this.loadExamTypeDdl(result)\n      },\n      (error) => {\n        console.log(error)\n      }\n    );\n  }\n\n  loadExamTypeDdl(classObject){\n    this.sharedApiService.getExamTypeDdl()\n    .pipe(takeUntil(this.unsubscribe$))\n    .subscribe(\n      (result: any) => {\n        this.setSearchConfig(classObject, result)\n      },\n      (error) => {\n        console.log(error)\n      }\n    );\n  }\n\n  setSearchConfig(classObject, examTypeObject) {\n    this.searchConfig = [\n      {\n        isViewMode: false,\n        type: \"select\",\n        label: \"Academic Session\",\n        name: \"academicSessionId\",\n        icon: \"ballot\",\n        options: this.masterData.academicSessions\n      },\n      {\n        isViewMode: false,\n        type: \"select\",\n        label: \"Exam type\",\n        name: \"examTypeId\",\n        icon: \"developer_board\",\n        options: examTypeObject\n      },\n      {\n        isViewMode: false,\n        type: \"select\",\n        label: \"Class\",\n        name: \"classId\",\n        icon: \"ballot\",\n        options: classObject\n      }\n    ];\n  }\n\n  onSearchClick() {\n    this._ListPage.searchParams = this.searchForm.value\n    this._ListPage.paging.pageIndex = 0\n    this._ListPage.getList()\n    this.searchCard.hide()\n  }\n\n  addNewClick() {\n    this.Id = null\n    this.showAddChangePage = true;\n    this.showReportCardPage = this.showViewPage = this.showListPage = false\n  }\n  backToListClick() {\n    this.showListPage = true;\n    this.showReportCardPage = this.showViewPage = this.showAddChangePage = false\n  }\n\n  onSaveSuccess(event) {\n    this.backToListClick()\n    if (this._ListPage) {\n      this._ListPage.getList()\n    }\n  }\n\n  tabularReportCardButtonEvent(event){\n    this.isTabularReportCard = true\n    this.Id = event;\n    this.showReportCardPage = true;\n    this.showDeleteButton = this.showListPage = this.showAddChangePage = this.showViewPage = false\n  }\n\n  reportCardButtonEvent(event){\n    this.isTabularReportCard = false\n    this.Id = event;\n    this.showReportCardPage = true;\n    this.showDeleteButton = this.showListPage = this.showAddChangePage = this.showViewPage = false\n  }\n\n  viewButtonEvent(event) {\n    this.Id = event;\n    this.showViewPage = true;\n    this.showDeleteButton = this.showListPage = this.showAddChangePage = this.showReportCardPage = false\n  }\n\n  editButtonEvent(event) {\n    this.showAddChangePage = true;\n    this.Id = event\n    this.showDeleteButton = this.showViewPage = this.showListPage = this.showReportCardPage = false\n  }\n\n  deleteButtonEvent(event) {\n    this.viewButtonEvent(event)\n    this.showDeleteButton = true\n  }\n\n  deleteExamPermanently() {\n    let dialogRef = this.sharedService.openConfirmDialog(\"You want to delete this 'Exam'?\")\n\n    dialogRef.afterClosed()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (confirmed: boolean) => {\n          if (confirmed) {\n\n            this.isLoading = true\n\n            this.examService.deleteSchoolExam(this.Id)\n              .pipe(takeUntil(this.unsubscribe$))\n              .subscribe(\n                (result) => {\n                  this.backToListClick()\n                  this._ListPage.getList()\n                  this.isLoading = false\n                },\n                (error) => {\n                  this.isLoading = false\n                }\n              )\n          }\n        },\n        (error) => {\n          this.isLoading = false\n        }\n      );\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n}\n","<responsive colGap=\"50px\">\n    <div fxFlex=\"30\">\n        <button type=\"button\" *ngIf=\"showListPage && editPermissions\" (click)=\"addNewClick()\" mat-raised-button\n            matTooltipShowDelay=\"100\" class=\"btn\" matTooltipHideDelay=\"100\">\n            <mat-icon>chrome_reader_mode</mat-icon> Add New Exam\n        </button>\n    </div>\n    <div fxFlex>\n        <card-bottom [form]=\"searchForm\" #searchCard [hidden]=\"!showListPage\" [title]=\"'Search Exam'\">\n            <card [header]=\"false\">\n                <form [formGroup]=\"searchForm\" (ngSubmit)=\"onSearchClick()\">\n                    <dynamic-form *ngIf=\"searchConfig\" [form]=\"searchForm\" [fields]=\"searchConfig\"></dynamic-form>\n                    <form-buttons [form]=\"searchForm\" [isSearchForm]=\"true\" (onReset)=\"onSearchClick()\"></form-buttons>\n                </form>\n            </card>\n        </card-bottom>\n    </div>\n</responsive>\n\n<responsive>\n    <div>\n        <button type=\"button\" *ngIf=\"showAddChangePage || showViewPage || showReportCardPage\"\n            (click)=\"backToListClick()\" mat-raised-button class=\"btn\" appToolTip=\"'Go back to Exam List'\"\n            matTooltipShowDelay=\"100\" matTooltipHideDelay=\"100\">\n            <mat-icon>keyboard_return</mat-icon> Back to Exam List\n        </button>\n    </div>\n</responsive>\n<br><br>\n\n<div *ngIf=\"showAddChangePage || showViewPage\">\n    <ng-container *ngIf=\"ClassSectionWiseStudents; else loadigImpData\">\n        <app-new-exam [changeModeId]=\"Id\" [isViewMode]=\"showViewPage\"\n            [ClassSectionWiseStudents]=\"ClassSectionWiseStudents\" (onSaveSuccess)=\"onSaveSuccess($event)\">\n        </app-new-exam>\n    </ng-container>\n    <ng-template #loadigImpData>\n        <h4>Please Wait...</h4>\n        <h5>We are loading some important data.</h5>\n        <br>\n        <app-loader></app-loader>\n    </ng-template>\n</div>\n\n<div *ngIf=\"showReportCardPage\">\n    <app-exam-report-card [isTabularReportCard]=\"isTabularReportCard\" [examId]=\"Id\"></app-exam-report-card>\n</div>\n\n<app-exam-list [hidden]=\"!showListPage\" (tabularReportCardButtonEvent)=\"tabularReportCardButtonEvent($event)\"\n    (reportCardButtonEvent)=\"reportCardButtonEvent($event)\" (viewButtonEvent)=\"viewButtonEvent($event)\"\n    (editButtonEvent)=\"editButtonEvent($event)\" (deleteButtonEvent)=\"deleteButtonEvent($event)\"></app-exam-list>\n\n<p>\n    <button *ngIf=\"showDeleteButton && showViewPage\" mat-raised-button class=\"delete-button padding\" type=\"button\"\n        (click)=\"deleteExamPermanently()\">\n        <mat-icon>delete_forever</mat-icon> Delete And Save\n    </button>\n</p>","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { ExamService } from '../../services/exam.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MasterData } from '@env/environment';\nimport { MatButtonToggleGroup } from '@angular/material/button-toggle';\n\n@Component({\n  selector: 'app-exam-report-card',\n  templateUrl: './exam-report-card.component.html',\n  styleUrls: ['./exam-report-card.component.css']\n})\nexport class ExamReportCardComponent implements OnInit {\n  @ViewChild('selectedSectionToggleButton') selectedSectionToggleButton : MatButtonToggleGroup\n  private unsubscribe$ = new Subject();\n\n  @Input() examId\n  @Input() isTabularReportCard\n\n  public isLoading\n  public dbData\n  public resultData\n  public sections\n  public masterData = MasterData\n  public selectedSectionId\n\n  constructor(\n    private examService: ExamService\n  ) { }\n\n  ngOnInit(): void {\n    this.getExamResult()\n  }\n\n  getExamResult() {\n    this.isLoading = true\n\n    this.examService.getExamResultStudentWise(this.examId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (result: any) => {\n          this.dbData = result\n          this.resultData = result\n          this.isLoading = false\n          this.getSectonList()\n        },\n        (error) => {\n          this.isLoading = false\n          console.log(error)\n        }\n      );\n  }\n\n  showOnlyFailed(value) {\n    if (!value) {\n      this.resultData = this.dbData\n    }\n    else {\n      let tempData = []\n      this.dbData.forEach(result => {\n        let failedSubject = result.subjects.filter(x => x.marksGained < x.passingMarks)\n        if (failedSubject.length > 0) {\n          tempData.push(result)\n        }\n      });\n\n      this.resultData = tempData\n    }\n\n    this.getSectonList()\n  }\n\n  getSectonList() {\n    let allSections = [] \n\n    this.resultData.forEach(element => {\n      allSections.push(element[\"_id\"][\"sectionId\"])\n    });\n\n    this.sections = Array.from(new Set(allSections)).sort();\n\n    if(this.sections.length > 0)\n    {\n      this.selectedSectionId = this.sections[0]\n\n      if(this.selectedSectionToggleButton){\n        this.selectedSectionToggleButton.value = this.selectedSectionId\n      }\n    }\n\n  }\n\n  onSectionChange(sectionId){\n    this.selectedSectionId = sectionId\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n\n}\n","<div *ngIf=\"!isLoading\" class=\"custom-page-mainDiv\">\n    <span *ngIf=\"dbData\" class=\"custom-page-header\">\n        Class {{dbData[0]?._id.classId | class}} Exam results\n    </span>\n    <p>\n        <mat-radio-group aria-label=\"Select an option\" value=\"all\">\n            <mat-radio-button value=\"all\" (click)=\"showOnlyFailed(false)\">All Students</mat-radio-button>\n            <mat-radio-button value=\"failed\" (click)=\"showOnlyFailed(true)\">Failed in any subject</mat-radio-button>\n        </mat-radio-group>\n    </p>\n    <br>\n    <div class=\"section-tabs\">\n        <mat-button-toggle-group #selectedSectionToggleButton=\"matButtonToggleGroup\" [value]=\"sections[0]\">\n            <mat-button-toggle (change)=\"onSectionChange($event.value)\" *ngFor=\"let section of sections\"\n                [value]=\"section\">\n                <span class=\"section-name\">Section {{section | masterData : 'classsections'}}</span>\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n    <ng-container *ngIf=\"selectedSectionId\">\n        <app-tabular-format *ngIf=\"isTabularReportCard\" [selectedSectionId]=\"selectedSectionId\"\n            [resultData]=\"resultData\"></app-tabular-format>\n\n        <div *ngIf=\"!isTabularReportCard\" class=\"section-details\">\n            <app-panel-format [selectedSectionId]=\"selectedSectionId\" [resultData]=\"resultData\"></app-panel-format>\n        </div>\n        <div *ngIf=\"resultData.length ==0\">\n            <no-record-found></no-record-found>\n        </div>\n        <br>\n        <row>\n            <div class=\"fill-space\"></div>\n            <div>\n                    <mat-icon class=\"report-type-icons pointer\" mat-icon-button [ngClass]=\"{'active-report-type': isTabularReportCard}\" (click)=\"isTabularReportCard = true\">table_chart</mat-icon>\n                    &nbsp;&nbsp;\n                    <mat-icon class=\"report-type-icons pointer\" mat-icon-button [ngClass]=\"{'active-report-type': !isTabularReportCard}\" (click)=\"isTabularReportCard = false\">face</mat-icon>\n            </div>\n            <div class=\"fill-space\"></div>\n        </row>\n        \n\n    </ng-container>\n</div>\n\n<app-loader *ngIf=\"isLoading\"></app-loader>","import { Component, OnInit, Input, SimpleChanges } from '@angular/core';\nimport { MasterData } from '@env/environment';\n\n@Component({\n  selector: 'app-panel-format',\n  templateUrl: './panel-format.component.html',\n  styleUrls: ['./panel-format.component.css']\n})\nexport class PanelFormatComponent implements OnInit {\n\n  @Input() set selectedSectionId(value) {\n    this.sectionId = value;\n    this.processFilter()\n  }\n\n  @Input() set resultData(value) {\n    this.orgData = value\n    this.processFilter()\n  }\n\n  public masterData = MasterData\n  public sectionId\n  private orgData\n  public filteredData\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  processFilter() {\n    this.filteredData = this.orgData ? this.orgData.filter(x => x._id.sectionId === this.sectionId) : null\n  }\n\n}\n","<div class=\"details-div\">\n    <mat-accordion hideToggle=\"true\" [multi]=\"masterData.expendMultiple\">\n        <ng-container *ngFor=\"let result of filteredData\">\n            <mat-expansion-panel>\n                <mat-expansion-panel-header class=\"appear-animate\">\n                    <mat-panel-title>\n                        <user-small-pic [userId]=\"result._id.studentId\"></user-small-pic>\n                        <div>\n                            <br>\n                            <responsive [colGap]=\"'5px'\">\n                                <div>\n                                    <b>Roll.No. </b>{{result.studentDetails.rollNo | numberData}}\n                                </div>\n                                <div>\n                                    {{result.studentDetails.firstName}} {{result.studentDetails.lastName}}\n                                </div>\n                            </responsive>\n                        </div>\n                    </mat-panel-title>\n                </mat-expansion-panel-header>\n                <table class=\"score-table\" border=\"1\" cellspacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th>\n                                Subject\n                            </th>\n                            <th>\n                                Total Marks\n                            </th>\n                            <th>\n                                Passing Marks\n                            </th>\n                            <th>\n                                Marks Gained\n                            </th>\n                        </tr>\n                    </thead>\n                    <tr class=\"tr\" *ngFor=\"let subject of result.subjects\">\n                        <td>\n                            {{ subject.subjectId | subject}}\n                        </td>\n                        <td>\n                            {{subject.maxMarks}}\n                        </td>\n                        <td>\n                            {{subject.passingMarks}}\n                        </td>\n                        <td [ngClass]=\"{'fail': subject.marksGained < subject.passingMarks}\">\n                            {{subject.marksGained}}\n                        </td>\n                    </tr>\n                </table>\n            </mat-expansion-panel>\n        </ng-container>\n    </mat-accordion>\n</div>","import { Component, OnInit, Input, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-tabular-format',\n  templateUrl: './tabular-format.component.html',\n  styleUrls: ['./tabular-format.component.css']\n})\nexport class TabularFormatComponent implements OnInit {\n\n  @Input() set selectedSectionId(value) {\n    this.sectionId = value;\n    this.processFilter()\n  }\n\n  @Input() set resultData(value) {\n    this.orgData = value\n    this.processFilter()\n  }\n\n  public sectionId\n  private orgData\n  public filteredData\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  processFilter() {\n    this.filteredData = this.orgData ? this.orgData.filter(x => x._id.sectionId === this.sectionId) : null\n  }\n\n  sortData(){\n\n  }\n\n  sortNodes(a, b) {\n    if (a[0]._id.distance < b[0].distance) return -1;\n    if (a[0].distance > b[0].distance) return 1;\n    return 0;\n}\n\n}\n","<table class=\"table\" *ngIf=\"filteredData\">\n    <thead class=\"thead\" style=\"zoom: 110%;\">\n        <tr>\n            <th colspan=\"2\">\n                Student Info\n            </th>\n            <th *ngFor=\"let subject of filteredData[0].subjects\">\n                {{ subject.subjectId | subject}}\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"tr appear-animate\" *ngFor=\"let result of filteredData\">\n            <td class=\"td\" style=\"width: 40px;\">\n                <user-small-pic [userId]=\"result._id.studentId\"></user-small-pic>\n            </td>\n            <td class=\"td\" style=\"zoom: 120%; padding-left: 5px;\">\n                <b>Roll.No. </b>{{result.studentDetails.rollNo | numberData}}\n                <br>\n                {{result.studentDetails.firstName}} {{result.studentDetails.lastName}}\n            </td>\n            <td class=\"td\" style=\"zoom: 120%;\" *ngFor=\"let subject of result.subjects\"\n                [ngClass]=\"{'fail': subject.marksGained < subject.passingMarks}\">\n                {{subject.marksGained}}\n            </td>\n        </tr>\n    </tbody>\n</table>","import { Component, OnInit, OnDestroy, Input, EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { FormGroup, FormBuilder, FormArray } from '@angular/forms';\nimport { FieldConfig, validationType } from '@app/shared/component/dynamic-form/field.interface';\nimport { MasterData } from '@env/environment';\nimport { SharedApiService } from '@app/shared/services/shared-api.service';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'class-subject',\n  templateUrl: './class-subject.component.html',\n  styleUrls: ['./class-subject.component.css']\n})\nexport class ClassSubjectComponent implements OnInit, OnDestroy {\n  private unsubscribe$ = new Subject();\n\n  @Input() form: FormGroup\n  @Input() examId\n  @Input() fieldsConfig: FieldConfig[]\n  @Input() initialFormValues = null\n  @Input() isViewMode = false\n  @Input() isEditMode\n  @Input() ClassSectionWiseStudents\n\n  isLoading = false\n  masterData = MasterData\n\n  public allClassSubjectObject\n  public classObject\n  public sectionList = null\n  public subjectList = null\n\n  branchClassChanged$ = new EventEmitter<any>()\n  sectionChanged$ = new EventEmitter<any>()\n\n  constructor(\n    private sharedApiService: SharedApiService,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit() {\n    if (this.initialFormValues) {\n      this.isEditMode = true\n    }\n\n    this.form.addControl(\"classSection\", this.fb.control({}));\n    this.form.addControl(\"subject\",\n      this.fb.array([])\n    );\n\n    this.fieldsConfig = [\n      {\n        isViewMode: this.isViewMode || this.isEditMode,\n        type: \"select\",\n        label: \"Class\",\n        name: \"classId\",\n        icon: \"ballot\",\n        onValueChange: this.branchClassChanged$,\n        options: null,\n        value: this.initialFormValues ? this.initialFormValues.classId : null,\n        validations: [validationType.required()]\n      },\n      {\n        isViewMode: this.isViewMode || this.isEditMode,\n        type: \"select\",\n        label: \"Academic Session\",\n        name: \"academicSessionId\",\n        icon: \"ballot\",\n        options: this.masterData.academicSessions,\n        value: this.initialFormValues ? this.initialFormValues.academicSessionId : null,\n        validations: [validationType.required()]\n      },\n      {\n        isViewMode: this.isViewMode || this.isEditMode,\n        type: \"select\",\n        label: \"Exam type\",\n        name: \"examTypeId\",\n        icon: \"developer_board\",\n        value: this.initialFormValues ? this.initialFormValues.examTypeId : null,\n        validations: [validationType.required()]\n      }\n    ]\n\n    this.registerDropdownChangeEvents()\n\n    this.fetchExamTypeDdl()\n    this.fetchClassDdl()\n  }\n\n  registerDropdownChangeEvents() {\n    this.branchClassChanged$\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(val => {\n        this.branchClassChanged(val)\n      })\n  }\n\n  fetchExamTypeDdl() {\n    this.isLoading = true\n    this.fieldsConfig[2].options = []; // make exam type list empty    \n\n    this.sharedApiService.getExamTypeDdl()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(val => {\n        this.fieldsConfig[2].options = val;\n        this.isLoading = false\n      },\n        error => {\n          this.isLoading = false\n        }\n      )\n  }\n\n  fetchClassDdl() {\n    this.isLoading = true\n    this.fieldsConfig[0].options = []; // make class list empty    \n\n    this.sharedApiService.getClassSubjectSectionDdl()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(val => {\n        this.allClassSubjectObject = val\n        this.populateClassDdl(val)\n        this.isLoading = false\n      },\n        error => {\n          this.isLoading = false\n        }\n      )\n  }\n\n  populateClassDdl(values) {\n    this.fieldsConfig[0].options = values;\n\n    if (this.isViewMode || this.isEditMode) {\n      this.loadClassWiseExam(this.initialFormValues.classId)\n    }\n  }\n\n  branchClassChanged(classId) {\n    this.loadClassWiseExam(classId)\n  }\n\n  loadClassWiseExam(classId) {\n    this.isLoading = true\n    this.sectionList = null;\n    this.subjectList = null;\n\n    (<FormArray>this.form.get('subject')).clear()\n    this.form.get('classSection').setValue(null);\n\n    if (this.initialFormValues) {\n      // In case of update we only show those sections and subjects of the class, which was available add the time of creating this exam.\n      this.sectionList = this.initialFormValues.classSection\n      this.subjectList = this.initialFormValues.subject.sort((a, b) => a.examDate > b.examDate ? 1 : -1)\n\n      this.subjectList && this.subjectList.forEach(subject => {\n        this.addSubject(classId, subject.subjectId, subject.sections)\n      });\n    }\n    else {\n      // When creating new exam, we will show all the current sections and subjects of the selected class.\n      this.classObject = this.allClassSubjectObject.filter(x => x._id.$oid === classId.$oid)\n      if (this.classObject.length > 0) {\n        this.classObject = this.classObject[0]\n        this.sectionList = this.classObject.classSection\n        this.subjectList = this.classObject.subject.filter(x => x.status == 1)\n        this.filterUniqueSubjects()\n\n        this.subjectList && this.subjectList.forEach(subject => {\n          this.addSubject(classId, subject._id, subject.sections)\n        });\n      }\n    }\n\n    this.sectionList && this.form.get('classSection').setValue(this.sectionList);\n    this.isLoading = false\n  }\n\n  filterUniqueSubjects() {\n    let uniqueSubjects = []\n\n    this.subjectList.forEach(sub => {\n      let filtered = uniqueSubjects.filter(x => x[\"_id\"][\"$oid\"] === sub[\"_id\"][\"$oid\"])\n\n      // If subject is not present their already\n      if (filtered.length === 0) {\n        let subObject = {\n          _id: sub[\"_id\"],\n          sections: [sub.sectionId]\n        }\n        uniqueSubjects.push(subObject)\n      }\n      else {\n        filtered[0].sections.push(sub.sectionId)\n      }\n    });\n\n    this.subjectList = uniqueSubjects\n  }\n\n  addSubject(classId, id, sections) {\n\n    let subjectForm = this.fb.group({\n      \"subjectId\": this.fb.control(id),\n      \"sections\": this.fb.array([])\n    })\n\n    if (sections && sections.length > 0) {\n\n      sections.forEach(section => {\n\n        // In case of update section.sectionId will work\n        let sectionId = section.sectionId ? section.sectionId : section\n\n        let fbGroup = this.fb.group({\n          \"sectionId\": this.fb.control(sectionId),\n          \"students\": this.fb.array([])\n        });\n\n        if (this.initialFormValues) {\n          let sub = this.initialFormValues.subject && this.initialFormValues.subject.find(x => x[\"subjectId\"][\"$oid\"] === id[\"$oid\"])\n          let sec = sub && sub.sections.find(x => x.sectionId === sectionId)\n          let students = sec && sec.students\n          this.mapStudentForSubject(students, <FormArray>fbGroup.get(\"students\"));\n        }\n        else {\n          // When creating new Exam\n          let filteredData = this.ClassSectionWiseStudents.find(x => x[\"_id\"][\"classId\"][\"$oid\"] === classId[\"$oid\"] && x[\"_id\"][\"sectionId\"] === sectionId)\n          let students = filteredData && filteredData.students ? filteredData.students : null\n          this.mapStudentForSubject(students, <FormArray>fbGroup.get(\"students\"));\n        }\n\n        (<FormArray>subjectForm.get(\"sections\")).push(fbGroup)\n      }\n      );\n    }\n\n    // Finally add this subject in the subject array\n    (<FormArray>this.form.get('subject')).push(subjectForm)\n  }\n\n  mapStudentForSubject(students, studentsControl) {\n\n    if (!(students && studentsControl)) {\n      return\n    }\n\n    students.forEach(stu => {\n\n      let studentId = stu.studentId ? stu.studentId : stu\n      let marksGained = stu.marksGained\n\n      let fbGroup = this.fb.group({\n        \"studentId\": this.fb.control(studentId),\n        \"marksGained\": this.fb.control(marksGained)\n      })\n      studentsControl.push(fbGroup)\n    });\n\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n\n}","<dynamic-form [form]=\"form\" [fields]=\"fieldsConfig\"></dynamic-form>\n<div>\n    <mat-accordion hideToggle=\"true\" [multi]=\"masterData.expendMultiple\">\n        <ng-container *ngFor=\"let subject of this.form['controls'].subject['controls']; let idxSubject = index;\">\n            <mat-expansion-panel class=\"no-shadow\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        <smart-div class=\"negative-margin\" [form]=\"subject\">\n                            <mat-icon>menu_book</mat-icon>\n                            {{ subject.controls['subjectId']?.value | subject}}\n                            <i [ngClass]=\"{'blink-animate': subject.controls['examDate']?.value | isToday}\"\n                                class=\"color-black\">{{subject.controls['examDate']?.value | date : 'fullDate'}}</i>\n                        </smart-div>\n                    </mat-panel-title>\n                </mat-expansion-panel-header>\n                <form-time-range [form]=\"subject\" [isViewMode]=\"isViewMode\" [fromLabel]=\"'Start Time'\"\n                    [toLabel]=\"'End Time'\" [Required]=\"true\"\n                    [initialFormValues]=\"initialFormValues?.subject[idxSubject]\">\n                </form-time-range>\n\n                <exam-basic-info [form]=\"subject\" [isViewMode]=\"isViewMode\" [classObject]=\"classObject\"\n                    [subjectId]=\"subject.controls['subjectId']?.value\"\n                    [initialFormValues]=\"initialFormValues?.subject[idxSubject]\">\n                </exam-basic-info>\n                    <app-subject-exam-result [form]=\"subject.controls['sections']\" [examId]=\"examId\"\n                        [isViewMode]=\"isViewMode\" *ngIf=\"isEditMode\" [subject]=\"subject\"\n                        [initialFormValues]=\"initialFormValues?.subject[idxSubject].sections\"\n                        [studentDetails]=\"initialFormValues?.studentDetails\">\n                    </app-subject-exam-result>\n            </mat-expansion-panel>\n        </ng-container>\n    </mat-accordion>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { MasterData } from '@env/environment';\n\n@Component({\n  selector: 'app-subject-exam-result-graph',\n  templateUrl: './subject-exam-result-graph.component.html',\n  styleUrls: ['./subject-exam-result-graph.component.css']\n})\nexport class SubjectExamResultGraphComponent implements OnInit {\n\n  @Input() form: FormArray\n  @Input() sectionId\n  @Input() subject : FormGroup\n  \n  public subjectId\n  public passingMarks = 0\n  public passedStudents = 0\n  public failedStudents = 0\n  public isGraphCalculationsDone = false\n  public passedPercentage\n  public chartColors\n  public masterData = MasterData\n\n  constructor() { \n    this.setChartColors()\n  }\n\n  ngOnInit(): void {\n    this.subjectId = this.subject.get(\"subjectId\").value\n    this.passingMarks = this.subject.controls['passingMarks'].value\n    this.calculate()\n  }\n\n  setChartColors(){\n    this.chartColors = [\n      {\n        backgroundColor: ['red', 'green','yellow'],\n      }\n    ]\n  }\n\n  calculate(){\n    this.isGraphCalculationsDone = false\n    this.passedStudents = 0\n    this.failedStudents = 0\n\n    let sectionsArray = this.form.controls;\n\n    sectionsArray.forEach(section => {\n      let sectionId = section.get('sectionId').value;\n      if(sectionId === this.sectionId){\n        let students = <FormArray> section.get('students')\n        students.controls.forEach(student => {\n          student.get('marksGained').value < this.passingMarks ? this.failedStudents++ : this.passedStudents++\n        });\n      }\n    });\n\n    if (this.passedStudents > 0) {\n      let total = this.passedStudents + this.failedStudents\n      this.passedPercentage = (this.passedStudents * 100) / total\n      this.passedPercentage = this.passedPercentage.toFixed(2);\n    }\n    else {\n      this.passedPercentage = \"0.00\";\n    }\n\n    this.isGraphCalculationsDone = true\n  }\n\n}\n","<app-chart [chartLabels]=\"['Failed','Passed']\" [chartColors]=\"chartColors\" [filter]=\"false\"\n    [chartData]=\"[failedStudents, passedStudents]\">\n</app-chart>","import { Component, OnInit, OnDestroy, Input, ViewChild, ElementRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { FormBuilder, FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { FieldConfig } from '@app/shared/component/dynamic-form/field.interface';\nimport { PostLoginService } from '@app/post-login/post-login.service';\nimport { MasterData } from '@env/environment';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { ExamService } from '@app/post-login/exam/services/exam.service';\nimport { takeUntil} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-subject-exam-result',\n  templateUrl: './subject-exam-result.component.html',\n  styleUrls: ['./subject-exam-result.component.css']\n})\nexport class SubjectExamResultComponent implements OnInit, OnDestroy {\n\n  private unsubscribe$ = new Subject();\n  \n  @ViewChild('stumarksGainedTextBoxRef') stumarksGainedTextBoxRef: ElementRef;\n\n  @Input() form: FormArray\n  @Input() initialFormValues = null\n  @Input() studentDetails     // This will be used only in case of update to show the student names\n  @Input() fieldsConfig: FieldConfig[]\n  @Input() isViewMode = false\n  @Input() subject : FormGroup\n  @Input() examId\n\n  public editPermissions = false\n  public isLoading = false\n  public title = \"View Exam Result\"\n  public subTitle = \"View student marksheet for this subject\"\n\n  public masterData = MasterData\n  public sections = []\n  public showResult = false\n  public subjectId\n  public showExamResult\n\n  constructor(\n    private plService: PostLoginService,\n    public sharedService: SharedService,\n    private examService: ExamService,\n    private fb: FormBuilder\n  ) {\n    this.editPermissions = this.plService.getPageEntitlements(9, 1) === 2\n  }\n\n  ngOnInit() {\n\n    this.subjectId = this.subject.get(\"subjectId\").value\n\n    this.computeClassSections()\n    \n    if (this.isViewMode) {\n      this.form.disable()\n    }\n  }\n\n  computeClassSections(){\n    this.form.controls.forEach(sec => {\n      this.sections.push(sec.get('sectionId').value)\n    });\n\n    this.sections.sort();\n  }\n\n  saveSectionResult(sectionId) {\n    this.form.markAllAsTouched()\n\n    if (this.form.valid) {\n      this.isLoading = true\n\n      let sectionResult = null\n\n      this.form.controls.forEach(element => {\n        if (element.get('sectionId').value === sectionId) {\n          sectionResult = element.value\n        }\n      });\n\n      let data = {\n        sectionResult: sectionResult,\n        subjectId: this.sharedService.serializeMongoObjectId(this.subjectId),\n        examId: this.sharedService.serializeMongoObjectId(this.examId)\n      }\n\n      let finalData = JSON.parse(JSON.stringify(data))\n      this.examService.saveSpecificSubjectSectionExamResult(finalData)\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (result: any) => {\n            this.isLoading = false\n            let sectionName = this.masterData.classSections.find(x => x.id === sectionId).name\n            this.sharedService.openSnackBar(\"Section-\"+sectionName+\" result get saved Successfully.\", \"x\", \"success\")\n            this.showExamResult = false\n          },\n          (error) => {\n            this.isLoading = false\n            console.log(error)\n          }\n        );\n    } else {\n      this.sharedService.openSnackBar(\"Some fields are invalid. Please fill them properly.\", \"x\", \"fail\")\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n\n}\n","<!--\n<input type=\"button\" value=\"Exam results\" (click)=\"showExamResult = true\">\n<card *ngIf=\"showExamResult\" [header]=\"false\" [fullScreen]=\"true\">    \n    <div class=\"custom-page-header\">\n        <row>\n            <div fxFlex>\n                <b>{{subjectId | subject}}</b> exam result\n            </div>\n            <div fxFlex=\"30px\">\n                <button type=\"button\" class=\"cross card-custom-header-buttons\" mat-icon-button (click)=\"showExamResult = false\">\n                    <mat-icon>cancel_presentation</mat-icon>\n                </button>\n            </div>\n        </row>\n    </div>\n-->\n<card title=\"Result\" subTitle=\"Update student exam result\" [refreshButton]=\"false\">\n    <form [formGroup]=\"form\">\n        <div class=\"section-tabs\">\n            <mat-button-toggle-group #selectedSectionToggleButton=\"matButtonToggleGroup\" [value]=\"1\">\n                <mat-button-toggle *ngFor=\"let section of sections\" [value]=\"section\">\n                    <span class=\"section-name\">Section {{section | masterData : 'classsections'}}</span>\n                </mat-button-toggle>\n            </mat-button-toggle-group>\n        </div>\n\n        <responsive *ngFor=\"let section of this.form.controls\"\n            [hidden]=\"selectedSectionToggleButton.value != section.get('sectionId').value\">\n            <div fxFlex>\n                <table class=\"table\">\n                    <thead class=\"thead\">\n                        <tr>\n                            <th></th>\n                            <th>Roll No</th>\n                            <th>Name</th>\n                            <th>Marks</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let student of section.get('students').controls\" class=\"tr appear-animate\">\n                            <td class=\"td\">\n                                <user-small-pic [userId]=\"student.get('studentId').value\"></user-small-pic>\n                            </td>\n                            <td class=\"td\">\n                                {{student.get('studentId').value | objectFilter : studentDetails : 'studentId' : 'rollNo' | numberData}}\n                            </td>\n                            <td class=\"td\">\n                                {{student.get('studentId').value | objectFilter : studentDetails : 'studentId' : 'firstName'}}\n                                {{student.get('studentId').value | objectFilter : studentDetails : 'studentId' : 'lastName'}}\n                            </td>\n                            <td class=\"td rt marksTd\" [formGroup]=\"student\"\n                                [ngClass]=\"{'fail': student.get('marksGained').value < this.subject.get('passingMarks')?.value}\">\n                                <input *ngIf=\"!isViewMode\" class=\"marksGainedTextbox\" trim matInput\n                                    [formControl]=\"student.get('marksGained')\" type=\"number\" min=\"0\" max=\"100\">\n                                <span *ngIf=\"isViewMode\">{{student.get('marksGained').value}}</span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br>\n            </div>\n            <div style=\"padding-left: 26px; padding-right: 6px;\" fxFlex class=\"appear-animate\"\n                [hidden]=\"selectedSectionToggleButton.value != section.get('sectionId').value\">\n                <app-subject-exam-result-graph *ngIf=\"isViewMode && this.subject.get('passingMarks')\"\n                    [subject]=\"subject\" [sectionId]=\"section.get('sectionId').value\" [form]=\"this.form\">\n                </app-subject-exam-result-graph>\n            </div>\n        </responsive>\n    </form>\n    <button *ngIf=\"!isViewMode && editPermissions\" style=\"max-width: 99%;\"\n        (click)=\"saveSectionResult(selectedSectionToggleButton.value)\" class=\"btn-submit padding generic-buttons\"\n        type=\"button\" mat-raised-button>\n        Save only {{subjectId | subject}}-{{selectedSectionToggleButton.value | masterData : 'classsections'}} result\n    </button>\n</card>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig, validationType } from '@app/shared/component/dynamic-form/field.interface';\nimport { MasterData } from '@env/environment';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { SchoolService } from '@app/post-login/school/services/school.service';\nimport { Subject } from 'rxjs';\nimport { SharedApiService } from '@app/shared/services/shared-api.service';\n\n@Component({\n  selector: 'exam-basic-info',\n  templateUrl: './exam-basic-info.component.html',\n  styleUrls: ['./exam-basic-info.component.css']\n})\nexport class ExamBasicInfoComponent implements OnInit, OnDestroy {\n\n  private unsubscribe$ = new Subject();\n\n  @Input() form: FormGroup\n  @Input() initialFormValues = null\n  @Input() fieldsConfig: FieldConfig[]\n  @Input() isViewMode = false\n  @Input() classObject\n  @Input() subjectId\n\n  public allteachersList\n  masterData = MasterData\n\n  constructor(\n    private sharedService: SharedService,\n    private sharedApiService: SharedApiService\n  ) {\n    this.loadAllTeachers();\n  }\n\n  ngOnInit() {\n    let maxMarks = 33\n    let passingMarks = 100\n\n    if (this.classObject) {\n      let sub = this.classObject.subject.find(x => x[\"_id\"][\"$oid\"] === this.subjectId[\"$oid\"])\n      maxMarks = sub.maxMarks\n      passingMarks = sub.passingMarks\n    }\n    \n    this.fieldsConfig = [\n      {\n        isViewMode: this.isViewMode,\n        type: \"input\",\n        label: \"Maximum marks\",\n        inputType: \"number\",\n        name: \"maxMarks\",\n        value: maxMarks,\n        validations: [validationType.required()]\n      },\n      {\n        isViewMode: this.isViewMode,\n        type: \"input\",\n        label: \"Passing marks\",\n        inputType: \"number\",\n        name: \"passingMarks\",\n        value: passingMarks,\n        validations: [validationType.required()]\n      },\n      {\n        isViewMode: this.isViewMode,\n        type: \"date\",\n        label: \"Exam Date\",\n        name: \"examDate\",\n        validations: [validationType.required()]\n      },\n      {\n        isViewMode: this.isViewMode,\n        type: \"select\",\n        label: \"Exam Teacher\",\n        name: \"teacherId\",\n        icon: \"account_circle\",\n        options: this.allteachersList,\n        validations: [validationType.required()]\n      },\n      {\n        isViewMode: this.isViewMode,\n        type: \"input\",\n        label: \"Exam Room\",\n        inputType: \"text\",\n        name: \"room\",\n        icon: \"meeting_room\",\n        validations: [validationType.required()]\n      },\n      {\n        isViewMode: this.isViewMode,\n        type: \"textarea\",\n        label: \"Comments\",\n        inputType: \"textarea\",\n        name: \"comments\"\n      }\n    ]\n\n    this.sharedService.setFormInitialValueForChangeMode(this.fieldsConfig, this.initialFormValues)\n  }\n\n  loadAllTeachers() {\n    this.sharedApiService.teacherDdl()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(val => {\n        this.allteachersList = val\n      },\n        error => {\n        }\n      )\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n\n}\n","<dynamic-form *ngIf=\"allteachersList\" [form]=\"form\" [fields]=\"fieldsConfig\" [addEmptyDiv]=\"false\"></dynamic-form>","import { Component, OnInit, OnDestroy, Output, EventEmitter, Input, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { MasterData } from '@env/environment';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { ExamService } from '../../services/exam.service';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-new-exam',\n  templateUrl: './new-exam.component.html',\n  styleUrls: ['./new-exam.component.css']\n})\nexport class NewExamComponent implements OnInit, OnDestroy {\n  private unsubscribe$ = new Subject();\n\n  @Output() public onSaveSuccess = new EventEmitter();\n  @Input() initialFormValues = null\n  @Input() changeModeId = null\n  @Input() isViewMode = false\n  @Input() showHeader = true\n  @Input() childCard = false;\n  @Input() ClassSectionWiseStudents = null  // Class section wise student list, Will be used only when creating new Exam\n\n  mainForm: FormGroup = new FormGroup({})\n\n  title = \"New Exam\"\n  subTitle = \"Add a new exam\"\n  isLoading = false\n  isPopulatingFormDb = false\n  masterData = MasterData\n  open = false\n\n  stoppageCount: number = 0\n\n  constructor(\n    public fb: FormBuilder,\n    private changeDetector: ChangeDetectorRef,\n    public sharedService: SharedService,\n    public examService: ExamService\n  ) { }\n\n  ngOnInit() {\n    this.setTitleMessages()\n    this.sharedService.setFormCommonFields(this.mainForm)\n\n    if (this.changeModeId) {\n      this.populateFromDB()\n    }\n  }\n\n  setTitleMessages() {\n    if (this.changeModeId) {\n      this.title = \"Update Exam.\"\n      this.subTitle = \"Please update following details of exam.\"\n\n      if (this.isViewMode) {\n        this.title = \"View Exam.\"\n        this.subTitle = \"View following details of exam.\"\n      }\n    }\n  }\n\n  populateFromDB() {\n    //--- Fill Exam information for View/Edit mode from Database\n\n    this.isLoading = true\n    this.isPopulatingFormDb = true\n\n    this.examService.getSchoolExam(this.changeModeId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (result: any) => {\n          result.forEach(element => {\n            this.initialFormValues = element\n            this.mainForm.get('_id').setValue(this.initialFormValues._id)\n            this.mainForm.get('status').setValue(this.initialFormValues.status)\n          });\n\n          this.isLoading = false\n          this.isPopulatingFormDb = false\n        },\n        (error) => {\n          this.isLoading = false\n          this.isPopulatingFormDb = false\n          console.log(error)\n        }\n      );\n  }\n\n  confirmSubmit(exam: Event) {\n\n    // In edit mode only, take the confirmation before saving the exam details.\n\n    if (this.changeModeId) {\n      let dialogRef = this.sharedService.openConfirmDialog(\"You want to Update the Exam results of all the subject and the exam info ?\")\n\n      dialogRef.afterClosed()\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (confirmed: boolean) => {\n            if (confirmed) {\n              this.onSubmit(exam)\n            }\n          },\n          (error) => {\n            this.isLoading = false\n          }\n        );\n    }\n    else {\n      this.onSubmit(exam)\n    }\n  }\n\n  onSubmit(exam: Event) {\n    this.mainForm.markAllAsTouched()\n    exam.preventDefault();\n    exam.stopPropagation();\n\n    if (this.mainForm.valid) {\n      this.isLoading = true\n\n      this.examService.saveSchoolExam(\n        this.mainForm.getRawValue()\n      )\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (result: any) => {\n            this.isLoading = false\n            this.onSaveSuccess.emit(true)\n            this.sharedService.openSnackBar(\"Exam's information saved Successfully.\", \"x\", \"success\")\n            this.mainForm.reset()\n          },\n          (error) => {\n            this.isLoading = false\n            console.log(error)\n          }\n        );\n    } else {\n      this.sharedService.openSnackBar(\"Some fields are invalid. Please fill them properly.\", \"x\", \"fail\")\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.changeDetector.detectChanges();\n  }\n\n  loadClassWiseStudents() {\n\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n\n}\n","<card [loading]=\"isLoading\" [title]=\"title\" [subTitle]=\"subTitle\" [cardButtons]=\"false\" [header]=\"showHeader\">\n    <form [formGroup]=\"mainForm\" (ngSubmit)=\"confirmSubmit($event)\" *ngIf=\"mainForm && !isPopulatingFormDb\">\n        <class-subject [examId]=\"changeModeId\" [isViewMode]=\"isViewMode\" [initialFormValues]=\"initialFormValues\" [form]=\"mainForm\" [ClassSectionWiseStudents]=\"ClassSectionWiseStudents\">\n        </class-subject>\n        <div class=\"info\" *ngIf=\"!isViewMode && changeModeId\">\n            If you press below 'Update' button then it will override the result for all the subjects and all the sections and also the exam information.\n        </div>\n        <form-buttons *ngIf=\"!isViewMode\" [form]=\"mainForm\" [isChangeMode]=\"changeModeId\"></form-buttons>\n    </form>\n</card>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ExamManagementComponent } from './exam-management/exam-management.component';\nimport { ExamTypeManagementComponent } from './exam-type-management/exam-type-management.component';\n\n\nconst routes: Routes = [  \n  {\n    path: 'exammgmt',\n    component: ExamManagementComponent,\n    outlet:'postLoginOutlet'\n  },\n  {\n    path: 'examtypemgmt',\n    component: ExamTypeManagementComponent,\n    outlet:'postLoginOutlet'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ExamRoutingModule { }\n","import { Component, OnInit, OnDestroy, Output, EventEmitter, Input, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { environment, MasterData } from '@env/environment';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { PageEvent } from '@angular/material/paginator';\nimport { Sort } from '@angular/material/sort';\nimport { PostLoginService } from '@app/post-login/post-login.service';\nimport { ExamTypeService } from '../../services/exam-type.service';\n\n@Component({\n  selector: 'app-exam-type-list',\n  templateUrl: './exam-type-list.component.html',\n  styleUrls: ['./exam-type-list.component.css']\n})\nexport class ExamTypeListComponent implements OnInit, OnDestroy {\n \n  private unsubscribe$ = new Subject();\n  \n  @Output() viewButtonEvent = new EventEmitter()\n  @Output() editButtonEvent = new EventEmitter()\n  @Output() deleteButtonEvent = new EventEmitter()\n  \n  @Input() pageTitle: string =\"\"\n  @Input() roleId: number\n\n  isLoading = false;\n\n  environment = environment\n  masterData = MasterData;\n  examTypes = [];\n\n  viewUserId : any\n  viewUser = false\n  public editPermissions\n\n  searchParams = null\n  paging = {\n    pageIndex: this.masterData.paging.pageIndex,\n    pageSize: this.masterData.paging.pageSize,\n    length: 1\n  }\n  sortParams = {\n    fieldName : \"name\",\n    isAsc : true\n  }\n\n  constructor(\n    private examTypeService: ExamTypeService,\n    private changeDetector: ChangeDetectorRef,\n    public sharedService: SharedService,\n    private plService: PostLoginService\n  ) {\n    this.editPermissions = this.plService.getPageEntitlements(9,2) == 2\n  }\n\n  ngOnInit() {\n    this.getList()\n  }\n\n  getList()\n  {\n    this.isLoading = true;\n\n    let SearchObject = {\n      SearchParameters : this.searchParams,\n      paging : {\n        \"pageIndex\": this.paging.pageIndex,\n        \"pageSize\": this.paging.pageSize\n      },\n      sorting:{\n        \"fieldName\": this.sortParams.fieldName,\n        \"isAsc\": this.sortParams.isAsc\n      }\n    }\n\n    this.examTypeService\n    .getSchoolExamTypeList(SearchObject)\n    .pipe(takeUntil(this.unsubscribe$))\n    .subscribe(\n      (result: any) => {\n        this.isLoading =false\n        this.examTypes = result.data   \n        this.paging.length = result.count    \n      }, \n      (error) => {\n        this.isLoading =false\n        console.log(error)\n      }\n      );    \n  }\n  \n  viewClicked(id){\n    this.viewButtonEvent.emit(id)\n  }\n\n  editClicked(id){\n    this.editButtonEvent.emit(id)\n  }\n\n  deleteClicked(id){\n    this.deleteButtonEvent.emit(id)\n  }\n\n  CardCrossEvent_ViewUser(){\n    this.viewUser = false\n  }\n\n  sortClicked(sort: Sort){\n    this.paging.pageIndex = 0\n    this.sortParams.fieldName = sort.active\n    this.sortParams.isAsc = sort.direction === 'asc'\n    this.getList()\n    this.changeDetector.detectChanges();\n  }\n\n  pagingClicked(paginator: PageEvent){  \n    this.paging.pageIndex = paginator.pageIndex\n    this.paging.pageSize = paginator.pageSize\n    this.getList();\n    this.changeDetector.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n}","<card [loading]=\"isLoading\" [title]=\"'Exam Type List'\" [subTitle]=\"'Manage your Exam Type for School'\"\n    (refresh)=\"getList()\">\n    <large-screen>\n        <table class=\"table\" matSort (matSortChange)=\"sortClicked($event)\">\n            <thead class=\"thead\">\n                <tr>\n                    <th class=\"sr\">#</th>\n                    <th matRipple mat-sort-header=\"code\">\n                            Exam Type Code\n                            <mat-icon>developer_board</mat-icon>\n                        </th>\n                    <th matRipple mat-sort-header=\"name\">\n                        Exam Type Name\n                        <mat-icon>developer_board</mat-icon>\n                    </th>\n                    <th class=\"action\">\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"tr\" *ngFor=\"let examType of examTypes; let idx = index\">\n                    <td class=\"sr-col\">{{ (paging.pageIndex *  paging.pageSize) + idx+1}}</td>\n                    <td>{{examType.code}}</td>\n                    <td>{{examType.name}}</td>\n                    <td class=\"rt\">\n                        <button mat-icon-button appToolTip=\"'View Subject'\" class=\"icon-view\"\n                            (click)=\"viewClicked(examType._id)\">\n                            <mat-icon mat-icon-button>visibility</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Edit Subject'\" class=\"icon-edit\"\n                            (click)=\"editClicked(examType._id)\">\n                            <mat-icon>edit</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Delete Subject'\" class=\"icon-delete\"\n                            (click)=\"deleteClicked(examType._id)\">\n                            <mat-icon>delete_forever</mat-icon>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </large-screen>\n\n    <small-screen class=\"default-font\">\n        <ng-container *ngFor=\"let examType of examTypes; let idx = index; let odd = odd\">\n            <card [childCard]=\"true\" [header]=\"false\">\n                <row gap=\"2px\">\n                    <div fxFlex=\"30%\">\n                        <b># {{ (paging.pageIndex * paging.pageSize) + idx+1}}</b>\n                    </div>\n                    <div fxFlex class=\"rt\">\n                        <button mat-icon-button appToolTip=\"'View Subject'\" class=\"big-icon-view\"\n                            (click)=\"viewClicked(examType._id)\">\n                            <mat-icon mat-icon-button>visibility</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Edit Subject'\" class=\"big-icon-edit\"\n                            (click)=\"editClicked(examType._id)\">\n                            <mat-icon>edit</mat-icon>\n                        </button>\n                        <button *ngIf=\"editPermissions\" mat-icon-button appToolTip=\"'Delete Subject'\" class=\"big-icon-delete\"\n                            (click)=\"deleteClicked(examType._id)\">\n                            <mat-icon>delete_forever</mat-icon>\n                        </button>\n                    </div>\n                </row>\n                <div class=\"bold\">\n                    <mat-icon>developer_board</mat-icon> {{examType.code}}\n                </div>\n                <br>\n                <div class=\"small-screen-data\">\n                    {{examType.name}}\n                </div>\n            </card>\n            <br>\n        </ng-container>\n\n    </small-screen>\n\n    <no-record-found *ngIf=\"examTypes.length ==0\"></no-record-found>\n\n    <mat-paginator [length]=\"paging.length\" [showFirstLastButtons]=\"masterData.paging.showFirstLastButtons\"\n        [pageSize]=\"paging.pageSize\" [pageSizeOptions]=\"masterData.paging.pageSizeOptions\"\n        (page)=\"pagingClicked($event)\">\n    </mat-paginator>\n\n</card>","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MasterData } from '@env/environment';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { FieldConfig } from '@app/shared/component/dynamic-form/field.interface';\nimport { takeUntil } from 'rxjs/operators';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { PostLoginService } from '@app/post-login/post-login.service';\nimport { ExamTypeListComponent } from './exam-type-list/exam-type-list.component';\nimport { ExamTypeService } from '../services/exam-type.service';\nimport { CardBottomComponent } from '@app/shared/component/boxes/card-bottom/card-bottom.component';\n\n@Component({\n  selector: 'app-exam-type-management',\n  templateUrl: './exam-type-management.component.html',\n  styleUrls: ['./exam-type-management.component.css']\n})\nexport class ExamTypeManagementComponent implements OnInit, OnDestroy {\n\n  private unsubscribe$ = new Subject();\n\n  @ViewChild(ExamTypeListComponent) private _ListPage: ExamTypeListComponent\n  @ViewChild('searchCard') searchCard : CardBottomComponent\n\n  showViewPage = false\n  showAddChangePage = false\n  showListPage = true\n  showDeleteButton = false\n  public editPermissions\n\n  isLoading = false\n  Id = null\n  masterData = MasterData\n\n  searchForm: FormGroup\n  searchConfig: FieldConfig[] = [\n    {\n      isViewMode: false,\n      type: \"input\",\n      label: \"Exam Type Name\",\n      inputType: \"text\",\n      name: \"name\",\n      icon: \"developer_board\"\n    } \n  ];\n\n  constructor(\n    private fb: FormBuilder,\n    private sharedService: SharedService,\n    private examTypeService: ExamTypeService,\n    private plService: PostLoginService\n  ) {\n    this.searchForm = this.fb.group({})\n    this.editPermissions = this.plService.getPageEntitlements(9,2) === 2\n  }\n\n  ngOnInit() {\n  }\n\n  onSearchClick() {\n    this._ListPage.searchParams = this.searchForm.value\n    this._ListPage.paging.pageIndex = 0\n    this._ListPage.getList()\n    this.searchCard.hide()\n  }\n\n  addNewClick() {\n    this.Id = null\n    this.showAddChangePage = true;\n    this.showViewPage = this.showListPage = false\n  }\n  backToListClick() {\n    this.showListPage = true;\n    this.showViewPage = this.showAddChangePage = false\n  }\n\n  onSaveSuccess(event) {\n    this.backToListClick()\n    if (this._ListPage) {\n      this._ListPage.getList()\n    }\n  }\n\n  viewButtonEvent(event) {\n    this.Id = event;\n    this.showViewPage = true;\n    this.showDeleteButton = this.showListPage = this.showAddChangePage = false\n  }\n\n  editButtonEvent(event) {\n    this.showAddChangePage = true;\n    this.Id = event\n    this.showDeleteButton = this.showViewPage = this.showListPage = false\n  }\n\n  deleteButtonEvent(event) {\n    this.viewButtonEvent(event)\n    this.showDeleteButton = true\n  }\n\n  deleteExamTypePermanently(){\n    let dialogRef = this.sharedService.openConfirmDialog(\"You want to delete this 'ExamType'?\")\n\n    dialogRef.afterClosed()\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (confirmed: boolean) => {\n          if (confirmed) {\n\n            this.isLoading = true\n\n            this.examTypeService.deleteSchoolExamType(this.Id)\n              .pipe(takeUntil(this.unsubscribe$))\n              .subscribe(\n                (result) => {\n                  this.backToListClick()\n                  this._ListPage.getList()                  \n                  this.isLoading = false\n                },\n                (error) => {\n                  this.isLoading = false\n                }\n              )\n          }\n        },\n        (error) => {\n          this.isLoading = false\n        }\n      );\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n}","<responsive colGap=\"50px\">\n    <div fxFlex=\"30\">\n        <button type=\"button\" *ngIf=\"showListPage && editPermissions\" (click)=\"addNewClick()\" mat-raised-button\n            matTooltipShowDelay=\"100\" class=\"btn\" matTooltipHideDelay=\"100\">\n            <mat-icon>developer_board</mat-icon> Add New Exam Type\n        </button>\n    </div>\n    <div fxFlex>\n        <card-bottom [form]=\"searchForm\" #searchCard [hidden]=\"!showListPage\" [title]=\"'Search Exam Type'\">\n            <card [header]=\"false\">\n                <form [formGroup]=\"searchForm\" (ngSubmit)=\"onSearchClick()\">\n                    <dynamic-form [form]=\"searchForm\" [fields]=\"searchConfig\"></dynamic-form>\n                    <form-buttons [form]=\"searchForm\" [isSearchForm]=\"true\" (onReset)=\"onSearchClick()\"></form-buttons>\n                </form>\n            </card>\n        </card-bottom>\n    </div>\n</responsive>\n\n<responsive>\n    <div>\n        <button type=\"button\" *ngIf=\"showAddChangePage || showViewPage\" (click)=\"backToListClick()\" mat-raised-button\n            class=\"btn\" appToolTip=\"'Go back to Exam Type List'\" matTooltipShowDelay=\"100\" matTooltipHideDelay=\"100\">\n            <mat-icon>keyboard_return</mat-icon> Back to Exam Type List\n        </button>\n    </div>\n</responsive>\n<br><br>\n\n<app-new-exam-type *ngIf=\"showAddChangePage || showViewPage\" [changeModeId]=\"Id\" [isViewMode]=\"showViewPage\"\n    (onSaveSuccess)=\"onSaveSuccess($event)\"></app-new-exam-type>\n<app-exam-type-list [hidden]=\"!showListPage\" (viewButtonEvent)=\"viewButtonEvent($event)\"\n    (editButtonEvent)=\"editButtonEvent($event)\" (deleteButtonEvent)=\"deleteButtonEvent($event)\"></app-exam-type-list>\n\n<p>\n    <button *ngIf=\"showDeleteButton && showViewPage\" mat-raised-button class=\"delete-button padding\" type=\"button\"\n        (click)=\"deleteExamTypePermanently()\">\n        <mat-icon>delete_forever</mat-icon> Delete And Save\n    </button>\n</p>","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FieldConfig, validationType } from '@app/shared/component/dynamic-form/field.interface';\nimport { MasterData } from '@env/environment';\nimport { SharedService } from '@app/shared/services/shared.service';\n\n@Component({\n  selector: 'exam-type-basic-info',\n  templateUrl: './exam-type-basic-info.component.html',\n  styleUrls: ['./exam-type-basic-info.component.css']\n})\nexport class ExamTypeBasicInfoComponent implements OnInit {\n\n  @Input() form: FormGroup\n  @Input() initialFormValues = null\n  @Input() fieldsConfig: FieldConfig[]\n  @Input() isViewMode = false\n\n  masterData = MasterData\n\n  constructor(    \n    private sharedService: SharedService\n  ) {}\n\n  ngOnInit() {\n    this.sharedService.setFormInitialValueForChangeMode(this.fieldsConfig, this.initialFormValues)\n  }\n\n}\n","<form-code-name [Required]=\"true\" [labelPrefix]=\"'Exam Type'\" [codeIcon]=\"'developer_board'\" [nameIcon]=\"'developer_board'\"\n    [form]=\"form\" [isViewMode]=\"isViewMode\" [initialFormValues]=\"initialFormValues\"></form-code-name>","import { Component, OnInit, OnDestroy, Output, EventEmitter, Input, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { MasterData } from '@env/environment';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { ExamTypeService } from '../../services/exam-type.service';\n\n@Component({\n  selector: 'app-new-exam-type',\n  templateUrl: './new-exam-type.component.html',\n  styleUrls: ['./new-exam-type.component.css']\n})\nexport class NewExamTypeComponent implements OnInit, OnDestroy {\n  private unsubscribe$ = new Subject();\n\n  @Output() public onSaveSuccess = new EventEmitter();\n  @Input() initialFormValues = null\n  @Input() changeModeId = null\n  @Input() isViewMode = false\n  @Input() showHeader = true\n  @Input() childCard = false;\n\n  mainForm: FormGroup = new FormGroup({})\n\n  title = \"New Exam Type\"\n  subTitle = \"Add a new Exam Type\"\n  isLoading = false\n  isPopulatingFormDb = false\n  masterData = MasterData\n  open = false\n\n  stoppageCount: number = 0\n\n  constructor(\n    public fb: FormBuilder,\n    private changeDetector: ChangeDetectorRef,\n    public sharedService: SharedService,\n    public examTypeService: ExamTypeService\n  ) { }\n\n  ngOnInit() {\n    this.setTitleMessages()\n    this.sharedService.setFormCommonFields(this.mainForm)\n\n    if (this.changeModeId) {\n      this.populateFromDB()\n    }\n  }\n\n  setTitleMessages() {\n    if (this.changeModeId) {\n      this.title = \"Update Exam Type.\"\n      this.subTitle = \"Please update following details of Exam Type.\"\n\n      if (this.isViewMode) {\n        this.title = \"View Exam Type.\"\n        this.subTitle = \"View following details of Exam Type.\"\n      }\n    }\n  }\n\n  populateFromDB() {\n    //--- Fill ExamType information for View/Edit mode from Database\n\n    this.isLoading = true\n    this.isPopulatingFormDb = true\n\n    this.examTypeService.getSchoolExamType(this.changeModeId)\n      .pipe(takeUntil(this.unsubscribe$))\n      .subscribe(\n        (result: any) => {\n          result.forEach(element => {\n            this.initialFormValues = element\n            this.mainForm.get('_id').setValue(this.initialFormValues._id)\n            this.mainForm.get('status').setValue(this.initialFormValues.status)\n          });\n\n          this.isLoading = false\n          this.isPopulatingFormDb = false\n        },\n        (error) => {\n          this.isLoading = false\n          this.isPopulatingFormDb = false\n          console.log(error)\n        }\n      );\n  }\n\n  onSubmit(examType: Event) {\n    this.mainForm.markAllAsTouched()\n    examType.preventDefault();\n    examType.stopPropagation();\n\n    if (this.mainForm.valid) {\n      this.isLoading = true\n\n      this.examTypeService.saveSchoolExamType(\n        this.mainForm.getRawValue()\n      )\n        .pipe(takeUntil(this.unsubscribe$))\n        .subscribe(\n          (result: any) => {\n            this.isLoading = false\n            this.onSaveSuccess.emit(true)\n            this.sharedService.openSnackBar(\"Exam Type information saved Successfully.\", \"x\", \"success\")\n            this.mainForm.reset()\n          },\n          (error) => {\n            this.isLoading = false\n            console.log(error)\n          }\n        );\n    } else {\n      this.sharedService.openSnackBar(\"Some fields are invalid. Please fill them properly.\", \"x\", \"fail\")\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.changeDetector.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe$.next(true);\n    this.unsubscribe$.complete();\n  }\n\n}\n","<card [loading]=\"isLoading\" [title]=\"title\" [subTitle]=\"subTitle\" [cardButtons]=\"false\" [header]=\"showHeader\">\n    <form [formGroup]=\"mainForm\" (ngSubmit)=\"onSubmit($event)\" *ngIf=\"mainForm && !isPopulatingFormDb\">\n        <exam-type-basic-info [form]=\"mainForm\" [isViewMode]=\"isViewMode\" [initialFormValues]=\"initialFormValues\">\n        </exam-type-basic-info>\n        <form-buttons *ngIf=\"!isViewMode\" [form]=\"mainForm\" [isChangeMode]=\"changeModeId\"></form-buttons>\n    </form>\n</card>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ExamRoutingModule } from './exam-routing.module';\nimport { ExamManagementComponent } from './exam-management/exam-management.component';\nimport { ExamListComponent } from './exam-management/exam-list/exam-list.component';\nimport { NewExamComponent } from './exam-management/new-exam/new-exam.component';\nimport { ExamBasicInfoComponent } from './exam-management/new-exam/exam-basic-info/exam-basic-info.component';\nimport { ExamService } from './services/exam.service';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { ClassSubjectComponent } from './exam-management/new-exam/class-subject/class-subject.component';\nimport { SubjectExamResultComponent } from './exam-management/new-exam/class-subject/subject-exam-result/subject-exam-result.component';\nimport { ExamTypeManagementComponent } from './exam-type-management/exam-type-management.component';\nimport { NewExamTypeComponent } from './exam-type-management/new-exam-type/new-exam-type.component';\nimport { ExamTypeListComponent } from './exam-type-management/exam-type-list/exam-type-list.component';\nimport { ExamTypeBasicInfoComponent } from './exam-type-management/new-exam-type/exam-type-basic-info/exam-type-basic-info.component';\nimport { ExamTypeService } from './services/exam-type.service';\nimport { ExamReportCardComponent } from './exam-management/exam-report-card/exam-report-card.component';\nimport { SubjectExamResultGraphComponent } from './exam-management/new-exam/class-subject/subject-exam-result/subject-exam-result-graph/subject-exam-result-graph.component';\nimport { TabularFormatComponent } from './exam-management/exam-report-card/tabular-format/tabular-format.component';\nimport { PanelFormatComponent } from './exam-management/exam-report-card/panel-format/panel-format.component';\n\n@NgModule({\n  declarations: [ExamManagementComponent,\n    ExamListComponent, NewExamComponent, ExamBasicInfoComponent, ClassSubjectComponent, SubjectExamResultComponent, ExamTypeManagementComponent, NewExamTypeComponent, \n    ExamTypeListComponent, ExamTypeBasicInfoComponent, ExamReportCardComponent, SubjectExamResultGraphComponent, TabularFormatComponent, PanelFormatComponent],\n  imports: [\n    ExamRoutingModule,\n    SharedModule\n  ],\n  providers:[ExamService, ExamTypeService]\n})\nexport class ExamModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { environment } from '@env/environment';\n\n@Injectable()\nexport class ExamTypeService {\n\n  apiPrefix = \"api/examType/\"\n\n  constructor(\n    private _http: HttpClient,\n    private _sharedService: SharedService\n  ) {\n  }\n\n  getSchoolExamTypeList(searchParams) {\n    return this._http.post(environment.apiUrl + this.apiPrefix + \"getSchoolExamTypeList\", searchParams)\n  }\n\n  getSchoolExamType(subjectId) {\n    return this._http.get(environment.apiUrl + this.apiPrefix + \"getSchoolExamType?id=\" + subjectId)\n  }\n  saveSchoolExamType(subjectData) {\n    return this._http.post(environment.apiUrl + this.apiPrefix + \"saveSchoolExamType\", subjectData)\n  }\n\n  deleteSchoolExamType(id) {\n    return this._http.get(environment.apiUrl + this.apiPrefix + \"deleteSchoolExamType?id=\" + this._sharedService.serializeMongoObjectId(id))\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { SharedService } from '@app/shared/services/shared.service';\nimport { environment } from '@env/environment';\n\n@Injectable()\nexport class ExamService {\n\n  apiPrefix = \"api/exam/\"\n\n  constructor(\n    private _http: HttpClient,\n    private _sharedService: SharedService\n  ) {\n  }\n\n  getSchoolExamList(searchParams) {\n    return this._http.post(environment.apiUrl + this.apiPrefix + \"getSchoolExamList\", searchParams)\n  }\n\n  getSchoolExam(examId) {\n    return this._http.get(environment.apiUrl + this.apiPrefix + \"getSchoolExam?id=\" + examId)\n  }\n\n  getExamResultStudentWise(examId) {\n    return this._http.get(environment.apiUrl + this.apiPrefix + \"getExamResultStudentWise?id=\" + examId)\n  }\n\n  saveSpecificSubjectSectionExamResult(data) {\n    return this._http.post(environment.apiUrl + this.apiPrefix + \"saveSpecificSubjectSectionExamResult\", data)\n  }\n\n  saveSchoolExam(examData) {\n    return this._http.post(environment.apiUrl + this.apiPrefix + \"saveSchoolExam\", examData)\n  }\n\n  getSchoolExamByDateRange(startDate, endDate) {\n    return this._http.get(environment.apiUrl + this.apiPrefix + \"getSchoolExamByDateRange?startDate =\" + startDate + \"&endDate =\" + endDate)\n  }\n\n  getSchoolExamByDate(examDate) {\n    return this._http.get(environment.apiUrl + this.apiPrefix + \"getSchoolExamByDate?agendaDate=\" + examDate)\n  }\n\n  deleteSchoolExam(id) {\n    return this._http.get(environment.apiUrl + this.apiPrefix + \"deleteSchoolExam?id=\" + this._sharedService.serializeMongoObjectId(id))\n  }\n\n}\n"]}